schema {
  query: query_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false
  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]
  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean
  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String
  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]
  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String
  """does the column NOT match the given pattern"""
  _nlike: String
  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String
  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String
  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String
  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar bigint

"""
Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'.
"""
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint!]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint!]
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC
  """descending ordering of the cursor"""
  DESC
}

"""
columns and relationships of "epoch_completions"
"""
type epoch_completions {
  account_id: String!
  completed_at: timestamptz
  """An object relationship"""
  epoch: epochs!
  epoch_id: Int!
  """An object relationship"""
  epoch_question: epoch_questions!
  id: Int!
  object_id: String!
  points_awarded: Int!
  question_id: Int!
  subject_id: String!
}

"""
aggregated selection of "epoch_completions"
"""
type epoch_completions_aggregate {
  aggregate: epoch_completions_aggregate_fields
  nodes: [epoch_completions!]!
}

input epoch_completions_aggregate_bool_exp {
  count: epoch_completions_aggregate_bool_exp_count
}

input epoch_completions_aggregate_bool_exp_count {
  arguments: [epoch_completions_select_column!]
  distinct: Boolean
  filter: epoch_completions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "epoch_completions"
"""
type epoch_completions_aggregate_fields {
  avg: epoch_completions_avg_fields
  count(columns: [epoch_completions_select_column!], distinct: Boolean): Int!
  max: epoch_completions_max_fields
  min: epoch_completions_min_fields
  stddev: epoch_completions_stddev_fields
  stddev_pop: epoch_completions_stddev_pop_fields
  stddev_samp: epoch_completions_stddev_samp_fields
  sum: epoch_completions_sum_fields
  var_pop: epoch_completions_var_pop_fields
  var_samp: epoch_completions_var_samp_fields
  variance: epoch_completions_variance_fields
}

"""
order by aggregate values of table "epoch_completions"
"""
input epoch_completions_aggregate_order_by {
  avg: epoch_completions_avg_order_by
  count: order_by
  max: epoch_completions_max_order_by
  min: epoch_completions_min_order_by
  stddev: epoch_completions_stddev_order_by
  stddev_pop: epoch_completions_stddev_pop_order_by
  stddev_samp: epoch_completions_stddev_samp_order_by
  sum: epoch_completions_sum_order_by
  var_pop: epoch_completions_var_pop_order_by
  var_samp: epoch_completions_var_samp_order_by
  variance: epoch_completions_variance_order_by
}

"""aggregate avg on columns"""
type epoch_completions_avg_fields {
  epoch_id: Float
  id: Float
  points_awarded: Float
  question_id: Float
}

"""
order by avg() on columns of table "epoch_completions"
"""
input epoch_completions_avg_order_by {
  epoch_id: order_by
  id: order_by
  points_awarded: order_by
  question_id: order_by
}

"""
Boolean expression to filter rows from the table "epoch_completions". All fields are combined with a logical 'AND'.
"""
input epoch_completions_bool_exp {
  _and: [epoch_completions_bool_exp!]
  _not: epoch_completions_bool_exp
  _or: [epoch_completions_bool_exp!]
  account_id: String_comparison_exp
  completed_at: timestamptz_comparison_exp
  epoch: epochs_bool_exp
  epoch_id: Int_comparison_exp
  epoch_question: epoch_questions_bool_exp
  id: Int_comparison_exp
  object_id: String_comparison_exp
  points_awarded: Int_comparison_exp
  question_id: Int_comparison_exp
  subject_id: String_comparison_exp
}

"""aggregate max on columns"""
type epoch_completions_max_fields {
  account_id: String
  completed_at: timestamptz
  epoch_id: Int
  id: Int
  object_id: String
  points_awarded: Int
  question_id: Int
  subject_id: String
}

"""
order by max() on columns of table "epoch_completions"
"""
input epoch_completions_max_order_by {
  account_id: order_by
  completed_at: order_by
  epoch_id: order_by
  id: order_by
  object_id: order_by
  points_awarded: order_by
  question_id: order_by
  subject_id: order_by
}

"""aggregate min on columns"""
type epoch_completions_min_fields {
  account_id: String
  completed_at: timestamptz
  epoch_id: Int
  id: Int
  object_id: String
  points_awarded: Int
  question_id: Int
  subject_id: String
}

"""
order by min() on columns of table "epoch_completions"
"""
input epoch_completions_min_order_by {
  account_id: order_by
  completed_at: order_by
  epoch_id: order_by
  id: order_by
  object_id: order_by
  points_awarded: order_by
  question_id: order_by
  subject_id: order_by
}

"""Ordering options when selecting data from "epoch_completions"."""
input epoch_completions_order_by {
  account_id: order_by
  completed_at: order_by
  epoch: epochs_order_by
  epoch_id: order_by
  epoch_question: epoch_questions_order_by
  id: order_by
  object_id: order_by
  points_awarded: order_by
  question_id: order_by
  subject_id: order_by
}

"""
select columns of table "epoch_completions"
"""
enum epoch_completions_select_column {
  """column name"""
  account_id
  """column name"""
  completed_at
  """column name"""
  epoch_id
  """column name"""
  id
  """column name"""
  object_id
  """column name"""
  points_awarded
  """column name"""
  question_id
  """column name"""
  subject_id
}

"""aggregate stddev on columns"""
type epoch_completions_stddev_fields {
  epoch_id: Float
  id: Float
  points_awarded: Float
  question_id: Float
}

"""
order by stddev() on columns of table "epoch_completions"
"""
input epoch_completions_stddev_order_by {
  epoch_id: order_by
  id: order_by
  points_awarded: order_by
  question_id: order_by
}

"""aggregate stddev_pop on columns"""
type epoch_completions_stddev_pop_fields {
  epoch_id: Float
  id: Float
  points_awarded: Float
  question_id: Float
}

"""
order by stddev_pop() on columns of table "epoch_completions"
"""
input epoch_completions_stddev_pop_order_by {
  epoch_id: order_by
  id: order_by
  points_awarded: order_by
  question_id: order_by
}

"""aggregate stddev_samp on columns"""
type epoch_completions_stddev_samp_fields {
  epoch_id: Float
  id: Float
  points_awarded: Float
  question_id: Float
}

"""
order by stddev_samp() on columns of table "epoch_completions"
"""
input epoch_completions_stddev_samp_order_by {
  epoch_id: order_by
  id: order_by
  points_awarded: order_by
  question_id: order_by
}

"""
Streaming cursor of the table "epoch_completions"
"""
input epoch_completions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: epoch_completions_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input epoch_completions_stream_cursor_value_input {
  account_id: String
  completed_at: timestamptz
  epoch_id: Int
  id: Int
  object_id: String
  points_awarded: Int
  question_id: Int
  subject_id: String
}

"""aggregate sum on columns"""
type epoch_completions_sum_fields {
  epoch_id: Int
  id: Int
  points_awarded: Int
  question_id: Int
}

"""
order by sum() on columns of table "epoch_completions"
"""
input epoch_completions_sum_order_by {
  epoch_id: order_by
  id: order_by
  points_awarded: order_by
  question_id: order_by
}

"""aggregate var_pop on columns"""
type epoch_completions_var_pop_fields {
  epoch_id: Float
  id: Float
  points_awarded: Float
  question_id: Float
}

"""
order by var_pop() on columns of table "epoch_completions"
"""
input epoch_completions_var_pop_order_by {
  epoch_id: order_by
  id: order_by
  points_awarded: order_by
  question_id: order_by
}

"""aggregate var_samp on columns"""
type epoch_completions_var_samp_fields {
  epoch_id: Float
  id: Float
  points_awarded: Float
  question_id: Float
}

"""
order by var_samp() on columns of table "epoch_completions"
"""
input epoch_completions_var_samp_order_by {
  epoch_id: order_by
  id: order_by
  points_awarded: order_by
  question_id: order_by
}

"""aggregate variance on columns"""
type epoch_completions_variance_fields {
  epoch_id: Float
  id: Float
  points_awarded: Float
  question_id: Float
}

"""
order by variance() on columns of table "epoch_completions"
"""
input epoch_completions_variance_order_by {
  epoch_id: order_by
  id: order_by
  points_awarded: order_by
  question_id: order_by
}

"""
columns and relationships of "epoch_points"
"""
type epoch_points {
  account_id: String!
  claimr_points: bigint
  community: bigint
  community_events: bigint
  created_at: timestamptz
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Int
  galxe_points: bigint
  id: Int!
  launchpad_quests_points: Int
  layer3_points: bigint
  portal_quests: Int
  referral: Int
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Int
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
  updated_at: timestamptz
}

"""
aggregated selection of "epoch_points"
"""
type epoch_points_aggregate {
  aggregate: epoch_points_aggregate_fields
  nodes: [epoch_points!]!
}

"""
aggregate fields of "epoch_points"
"""
type epoch_points_aggregate_fields {
  avg: epoch_points_avg_fields
  count(columns: [epoch_points_select_column!], distinct: Boolean): Int!
  max: epoch_points_max_fields
  min: epoch_points_min_fields
  stddev: epoch_points_stddev_fields
  stddev_pop: epoch_points_stddev_pop_fields
  stddev_samp: epoch_points_stddev_samp_fields
  sum: epoch_points_sum_fields
  var_pop: epoch_points_var_pop_fields
  var_samp: epoch_points_var_samp_fields
  variance: epoch_points_variance_fields
}

"""aggregate avg on columns"""
type epoch_points_avg_fields {
  claimr_points: Float
  community: Float
  community_events: Float
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Float
  galxe_points: Float
  id: Float
  launchpad_quests_points: Float
  layer3_points: Float
  portal_quests: Float
  referral: Float
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Float
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
}

"""
Boolean expression to filter rows from the table "epoch_points". All fields are combined with a logical 'AND'.
"""
input epoch_points_bool_exp {
  _and: [epoch_points_bool_exp!]
  _not: epoch_points_bool_exp
  _or: [epoch_points_bool_exp!]
  account_id: String_comparison_exp
  claimr_points: bigint_comparison_exp
  community: bigint_comparison_exp
  community_events: bigint_comparison_exp
  created_at: timestamptz_comparison_exp
  discord_points: Int_comparison_exp
  discord_roles: Int_comparison_exp
  galxe_points: bigint_comparison_exp
  id: Int_comparison_exp
  launchpad_quests_points: Int_comparison_exp
  layer3_points: bigint_comparison_exp
  portal_quests: Int_comparison_exp
  referral: Int_comparison_exp
  relic_points: Int_comparison_exp
  social: Int_comparison_exp
  total_community: bigint_comparison_exp
  total_points: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type epoch_points_max_fields {
  account_id: String
  claimr_points: bigint
  community: bigint
  community_events: bigint
  created_at: timestamptz
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Int
  galxe_points: bigint
  id: Int
  launchpad_quests_points: Int
  layer3_points: bigint
  portal_quests: Int
  referral: Int
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Int
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
  updated_at: timestamptz
}

"""aggregate min on columns"""
type epoch_points_min_fields {
  account_id: String
  claimr_points: bigint
  community: bigint
  community_events: bigint
  created_at: timestamptz
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Int
  galxe_points: bigint
  id: Int
  launchpad_quests_points: Int
  layer3_points: bigint
  portal_quests: Int
  referral: Int
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Int
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
  updated_at: timestamptz
}

"""Ordering options when selecting data from "epoch_points"."""
input epoch_points_order_by {
  account_id: order_by
  claimr_points: order_by
  community: order_by
  community_events: order_by
  created_at: order_by
  discord_points: order_by
  discord_roles: order_by
  galxe_points: order_by
  id: order_by
  launchpad_quests_points: order_by
  layer3_points: order_by
  portal_quests: order_by
  referral: order_by
  relic_points: order_by
  social: order_by
  total_community: order_by
  total_points: order_by
  updated_at: order_by
}

"""
select columns of table "epoch_points"
"""
enum epoch_points_select_column {
  """column name"""
  account_id
  """column name"""
  claimr_points
  """column name"""
  community
  """column name"""
  community_events
  """column name"""
  created_at
  """column name"""
  discord_roles
  """column name"""
  galxe_points
  """column name"""
  id
  """column name"""
  launchpad_quests_points
  """column name"""
  layer3_points
  """column name"""
  portal_quests
  """column name"""
  referral
  """column name"""
  social
  """column name"""
  updated_at
}

"""aggregate stddev on columns"""
type epoch_points_stddev_fields {
  claimr_points: Float
  community: Float
  community_events: Float
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Float
  galxe_points: Float
  id: Float
  launchpad_quests_points: Float
  layer3_points: Float
  portal_quests: Float
  referral: Float
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Float
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
}

"""aggregate stddev_pop on columns"""
type epoch_points_stddev_pop_fields {
  claimr_points: Float
  community: Float
  community_events: Float
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Float
  galxe_points: Float
  id: Float
  launchpad_quests_points: Float
  layer3_points: Float
  portal_quests: Float
  referral: Float
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Float
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
}

"""aggregate stddev_samp on columns"""
type epoch_points_stddev_samp_fields {
  claimr_points: Float
  community: Float
  community_events: Float
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Float
  galxe_points: Float
  id: Float
  launchpad_quests_points: Float
  layer3_points: Float
  portal_quests: Float
  referral: Float
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Float
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
}

"""
Streaming cursor of the table "epoch_points"
"""
input epoch_points_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: epoch_points_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input epoch_points_stream_cursor_value_input {
  account_id: String
  claimr_points: bigint
  community: bigint
  community_events: bigint
  created_at: timestamptz
  discord_roles: Int
  galxe_points: bigint
  id: Int
  launchpad_quests_points: Int
  layer3_points: bigint
  portal_quests: Int
  referral: Int
  social: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type epoch_points_sum_fields {
  claimr_points: bigint
  community: bigint
  community_events: bigint
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Int
  galxe_points: bigint
  id: Int
  launchpad_quests_points: Int
  layer3_points: bigint
  portal_quests: Int
  referral: Int
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Int
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
}

"""aggregate var_pop on columns"""
type epoch_points_var_pop_fields {
  claimr_points: Float
  community: Float
  community_events: Float
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Float
  galxe_points: Float
  id: Float
  launchpad_quests_points: Float
  layer3_points: Float
  portal_quests: Float
  referral: Float
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Float
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
}

"""aggregate var_samp on columns"""
type epoch_points_var_samp_fields {
  claimr_points: Float
  community: Float
  community_events: Float
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Float
  galxe_points: Float
  id: Float
  launchpad_quests_points: Float
  layer3_points: Float
  portal_quests: Float
  referral: Float
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Float
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
}

"""aggregate variance on columns"""
type epoch_points_variance_fields {
  claimr_points: Float
  community: Float
  community_events: Float
  """
  A computed field, executes function "calculate_discord_points"
  """
  discord_points: Int
  discord_roles: Float
  galxe_points: Float
  id: Float
  launchpad_quests_points: Float
  layer3_points: Float
  portal_quests: Float
  referral: Float
  """
  A computed field, executes function "calculate_relic_points"
  """
  relic_points: Int
  social: Float
  """
  A computed field, executes function "epoch_points_total_community"
  """
  total_community: bigint
  """
  A computed field, executes function "calculate_total_points"
  """
  total_points: Int
}

"""
columns and relationships of "epoch_questions"
"""
type epoch_questions {
  created_at: timestamptz
  description: String
  enabled: Boolean
  """An object relationship"""
  epoch: epochs
  """An array relationship"""
  epoch_completions(
    """distinct select on columns"""
    distinct_on: [epoch_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_completions_order_by!]
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): [epoch_completions!]!
  """An aggregate relationship"""
  epoch_completions_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_completions_order_by!]
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): epoch_completions_aggregate!
  epoch_id: Int
  id: Int!
  link: String
  object_id: String
  order: Int
  point_award_amount: Int!
  predicate_id: String
  preferences_predicate_id: String
  tag_object_id: String
  title: String!
}

"""
aggregated selection of "epoch_questions"
"""
type epoch_questions_aggregate {
  aggregate: epoch_questions_aggregate_fields
  nodes: [epoch_questions!]!
}

input epoch_questions_aggregate_bool_exp {
  bool_and: epoch_questions_aggregate_bool_exp_bool_and
  bool_or: epoch_questions_aggregate_bool_exp_bool_or
  count: epoch_questions_aggregate_bool_exp_count
}

input epoch_questions_aggregate_bool_exp_bool_and {
  arguments: epoch_questions_select_column_epoch_questions_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: epoch_questions_bool_exp
  predicate: Boolean_comparison_exp!
}

input epoch_questions_aggregate_bool_exp_bool_or {
  arguments: epoch_questions_select_column_epoch_questions_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: epoch_questions_bool_exp
  predicate: Boolean_comparison_exp!
}

input epoch_questions_aggregate_bool_exp_count {
  arguments: [epoch_questions_select_column!]
  distinct: Boolean
  filter: epoch_questions_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "epoch_questions"
"""
type epoch_questions_aggregate_fields {
  avg: epoch_questions_avg_fields
  count(columns: [epoch_questions_select_column!], distinct: Boolean): Int!
  max: epoch_questions_max_fields
  min: epoch_questions_min_fields
  stddev: epoch_questions_stddev_fields
  stddev_pop: epoch_questions_stddev_pop_fields
  stddev_samp: epoch_questions_stddev_samp_fields
  sum: epoch_questions_sum_fields
  var_pop: epoch_questions_var_pop_fields
  var_samp: epoch_questions_var_samp_fields
  variance: epoch_questions_variance_fields
}

"""
order by aggregate values of table "epoch_questions"
"""
input epoch_questions_aggregate_order_by {
  avg: epoch_questions_avg_order_by
  count: order_by
  max: epoch_questions_max_order_by
  min: epoch_questions_min_order_by
  stddev: epoch_questions_stddev_order_by
  stddev_pop: epoch_questions_stddev_pop_order_by
  stddev_samp: epoch_questions_stddev_samp_order_by
  sum: epoch_questions_sum_order_by
  var_pop: epoch_questions_var_pop_order_by
  var_samp: epoch_questions_var_samp_order_by
  variance: epoch_questions_variance_order_by
}

"""aggregate avg on columns"""
type epoch_questions_avg_fields {
  epoch_id: Float
  id: Float
  order: Float
  point_award_amount: Float
}

"""
order by avg() on columns of table "epoch_questions"
"""
input epoch_questions_avg_order_by {
  epoch_id: order_by
  id: order_by
  order: order_by
  point_award_amount: order_by
}

"""
Boolean expression to filter rows from the table "epoch_questions". All fields are combined with a logical 'AND'.
"""
input epoch_questions_bool_exp {
  _and: [epoch_questions_bool_exp!]
  _not: epoch_questions_bool_exp
  _or: [epoch_questions_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  enabled: Boolean_comparison_exp
  epoch: epochs_bool_exp
  epoch_completions: epoch_completions_bool_exp
  epoch_completions_aggregate: epoch_completions_aggregate_bool_exp
  epoch_id: Int_comparison_exp
  id: Int_comparison_exp
  link: String_comparison_exp
  object_id: String_comparison_exp
  order: Int_comparison_exp
  point_award_amount: Int_comparison_exp
  predicate_id: String_comparison_exp
  preferences_predicate_id: String_comparison_exp
  tag_object_id: String_comparison_exp
  title: String_comparison_exp
}

"""aggregate max on columns"""
type epoch_questions_max_fields {
  created_at: timestamptz
  description: String
  epoch_id: Int
  id: Int
  link: String
  object_id: String
  order: Int
  point_award_amount: Int
  predicate_id: String
  preferences_predicate_id: String
  tag_object_id: String
  title: String
}

"""
order by max() on columns of table "epoch_questions"
"""
input epoch_questions_max_order_by {
  created_at: order_by
  description: order_by
  epoch_id: order_by
  id: order_by
  link: order_by
  object_id: order_by
  order: order_by
  point_award_amount: order_by
  predicate_id: order_by
  preferences_predicate_id: order_by
  tag_object_id: order_by
  title: order_by
}

"""aggregate min on columns"""
type epoch_questions_min_fields {
  created_at: timestamptz
  description: String
  epoch_id: Int
  id: Int
  link: String
  object_id: String
  order: Int
  point_award_amount: Int
  predicate_id: String
  preferences_predicate_id: String
  tag_object_id: String
  title: String
}

"""
order by min() on columns of table "epoch_questions"
"""
input epoch_questions_min_order_by {
  created_at: order_by
  description: order_by
  epoch_id: order_by
  id: order_by
  link: order_by
  object_id: order_by
  order: order_by
  point_award_amount: order_by
  predicate_id: order_by
  preferences_predicate_id: order_by
  tag_object_id: order_by
  title: order_by
}

"""Ordering options when selecting data from "epoch_questions"."""
input epoch_questions_order_by {
  created_at: order_by
  description: order_by
  enabled: order_by
  epoch: epochs_order_by
  epoch_completions_aggregate: epoch_completions_aggregate_order_by
  epoch_id: order_by
  id: order_by
  link: order_by
  object_id: order_by
  order: order_by
  point_award_amount: order_by
  predicate_id: order_by
  preferences_predicate_id: order_by
  tag_object_id: order_by
  title: order_by
}

"""
select columns of table "epoch_questions"
"""
enum epoch_questions_select_column {
  """column name"""
  created_at
  """column name"""
  description
  """column name"""
  enabled
  """column name"""
  epoch_id
  """column name"""
  id
  """column name"""
  link
  """column name"""
  object_id
  """column name"""
  order
  """column name"""
  point_award_amount
  """column name"""
  predicate_id
  """column name"""
  preferences_predicate_id
  """column name"""
  tag_object_id
  """column name"""
  title
}

"""
select "epoch_questions_aggregate_bool_exp_bool_and_arguments_columns" columns of table "epoch_questions"
"""
enum epoch_questions_select_column_epoch_questions_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  enabled
}

"""
select "epoch_questions_aggregate_bool_exp_bool_or_arguments_columns" columns of table "epoch_questions"
"""
enum epoch_questions_select_column_epoch_questions_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  enabled
}

"""aggregate stddev on columns"""
type epoch_questions_stddev_fields {
  epoch_id: Float
  id: Float
  order: Float
  point_award_amount: Float
}

"""
order by stddev() on columns of table "epoch_questions"
"""
input epoch_questions_stddev_order_by {
  epoch_id: order_by
  id: order_by
  order: order_by
  point_award_amount: order_by
}

"""aggregate stddev_pop on columns"""
type epoch_questions_stddev_pop_fields {
  epoch_id: Float
  id: Float
  order: Float
  point_award_amount: Float
}

"""
order by stddev_pop() on columns of table "epoch_questions"
"""
input epoch_questions_stddev_pop_order_by {
  epoch_id: order_by
  id: order_by
  order: order_by
  point_award_amount: order_by
}

"""aggregate stddev_samp on columns"""
type epoch_questions_stddev_samp_fields {
  epoch_id: Float
  id: Float
  order: Float
  point_award_amount: Float
}

"""
order by stddev_samp() on columns of table "epoch_questions"
"""
input epoch_questions_stddev_samp_order_by {
  epoch_id: order_by
  id: order_by
  order: order_by
  point_award_amount: order_by
}

"""
Streaming cursor of the table "epoch_questions"
"""
input epoch_questions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: epoch_questions_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input epoch_questions_stream_cursor_value_input {
  created_at: timestamptz
  description: String
  enabled: Boolean
  epoch_id: Int
  id: Int
  link: String
  object_id: String
  order: Int
  point_award_amount: Int
  predicate_id: String
  preferences_predicate_id: String
  tag_object_id: String
  title: String
}

"""aggregate sum on columns"""
type epoch_questions_sum_fields {
  epoch_id: Int
  id: Int
  order: Int
  point_award_amount: Int
}

"""
order by sum() on columns of table "epoch_questions"
"""
input epoch_questions_sum_order_by {
  epoch_id: order_by
  id: order_by
  order: order_by
  point_award_amount: order_by
}

"""aggregate var_pop on columns"""
type epoch_questions_var_pop_fields {
  epoch_id: Float
  id: Float
  order: Float
  point_award_amount: Float
}

"""
order by var_pop() on columns of table "epoch_questions"
"""
input epoch_questions_var_pop_order_by {
  epoch_id: order_by
  id: order_by
  order: order_by
  point_award_amount: order_by
}

"""aggregate var_samp on columns"""
type epoch_questions_var_samp_fields {
  epoch_id: Float
  id: Float
  order: Float
  point_award_amount: Float
}

"""
order by var_samp() on columns of table "epoch_questions"
"""
input epoch_questions_var_samp_order_by {
  epoch_id: order_by
  id: order_by
  order: order_by
  point_award_amount: order_by
}

"""aggregate variance on columns"""
type epoch_questions_variance_fields {
  epoch_id: Float
  id: Float
  order: Float
  point_award_amount: Float
}

"""
order by variance() on columns of table "epoch_questions"
"""
input epoch_questions_variance_order_by {
  epoch_id: order_by
  id: order_by
  order: order_by
  point_award_amount: order_by
}

"""
columns and relationships of "epochs"
"""
type epochs {
  created_at: timestamptz
  description: String
  end_date: timestamptz!
  """An array relationship"""
  epoch_completions(
    """distinct select on columns"""
    distinct_on: [epoch_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_completions_order_by!]
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): [epoch_completions!]!
  """An aggregate relationship"""
  epoch_completions_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_completions_order_by!]
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): epoch_completions_aggregate!
  """An array relationship"""
  epoch_questions(
    """distinct select on columns"""
    distinct_on: [epoch_questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_questions_order_by!]
    """filter the rows returned"""
    where: epoch_questions_bool_exp
  ): [epoch_questions!]!
  """An aggregate relationship"""
  epoch_questions_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_questions_order_by!]
    """filter the rows returned"""
    where: epoch_questions_bool_exp
  ): epoch_questions_aggregate!
  id: Int!
  is_active: Boolean
  name: String!
  order: Int
  start_date: timestamptz!
  total_points: Int
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
  type: String
  updated_at: timestamptz
}

"""
aggregated selection of "epochs"
"""
type epochs_aggregate {
  aggregate: epochs_aggregate_fields
  nodes: [epochs!]!
}

"""
aggregate fields of "epochs"
"""
type epochs_aggregate_fields {
  avg: epochs_avg_fields
  count(columns: [epochs_select_column!], distinct: Boolean): Int!
  max: epochs_max_fields
  min: epochs_min_fields
  stddev: epochs_stddev_fields
  stddev_pop: epochs_stddev_pop_fields
  stddev_samp: epochs_stddev_samp_fields
  sum: epochs_sum_fields
  var_pop: epochs_var_pop_fields
  var_samp: epochs_var_samp_fields
  variance: epochs_variance_fields
}

"""aggregate avg on columns"""
type epochs_avg_fields {
  id: Float
  order: Float
  total_points: Float
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
}

"""
Boolean expression to filter rows from the table "epochs". All fields are combined with a logical 'AND'.
"""
input epochs_bool_exp {
  _and: [epochs_bool_exp!]
  _not: epochs_bool_exp
  _or: [epochs_bool_exp!]
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  end_date: timestamptz_comparison_exp
  epoch_completions: epoch_completions_bool_exp
  epoch_completions_aggregate: epoch_completions_aggregate_bool_exp
  epoch_questions: epoch_questions_bool_exp
  epoch_questions_aggregate: epoch_questions_aggregate_bool_exp
  id: Int_comparison_exp
  is_active: Boolean_comparison_exp
  name: String_comparison_exp
  order: Int_comparison_exp
  start_date: timestamptz_comparison_exp
  total_points: Int_comparison_exp
  total_points_available: Int_comparison_exp
  type: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""aggregate max on columns"""
type epochs_max_fields {
  created_at: timestamptz
  description: String
  end_date: timestamptz
  id: Int
  name: String
  order: Int
  start_date: timestamptz
  total_points: Int
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
  type: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type epochs_min_fields {
  created_at: timestamptz
  description: String
  end_date: timestamptz
  id: Int
  name: String
  order: Int
  start_date: timestamptz
  total_points: Int
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
  type: String
  updated_at: timestamptz
}

"""Ordering options when selecting data from "epochs"."""
input epochs_order_by {
  created_at: order_by
  description: order_by
  end_date: order_by
  epoch_completions_aggregate: epoch_completions_aggregate_order_by
  epoch_questions_aggregate: epoch_questions_aggregate_order_by
  id: order_by
  is_active: order_by
  name: order_by
  order: order_by
  start_date: order_by
  total_points: order_by
  total_points_available: order_by
  type: order_by
  updated_at: order_by
}

"""
select columns of table "epochs"
"""
enum epochs_select_column {
  """column name"""
  created_at
  """column name"""
  description
  """column name"""
  end_date
  """column name"""
  id
  """column name"""
  is_active
  """column name"""
  name
  """column name"""
  order
  """column name"""
  start_date
  """column name"""
  total_points
  """column name"""
  type
  """column name"""
  updated_at
}

"""aggregate stddev on columns"""
type epochs_stddev_fields {
  id: Float
  order: Float
  total_points: Float
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
}

"""aggregate stddev_pop on columns"""
type epochs_stddev_pop_fields {
  id: Float
  order: Float
  total_points: Float
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
}

"""aggregate stddev_samp on columns"""
type epochs_stddev_samp_fields {
  id: Float
  order: Float
  total_points: Float
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
}

"""
Streaming cursor of the table "epochs"
"""
input epochs_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: epochs_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input epochs_stream_cursor_value_input {
  created_at: timestamptz
  description: String
  end_date: timestamptz
  id: Int
  is_active: Boolean
  name: String
  order: Int
  start_date: timestamptz
  total_points: Int
  type: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type epochs_sum_fields {
  id: Int
  order: Int
  total_points: Int
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
}

"""aggregate var_pop on columns"""
type epochs_var_pop_fields {
  id: Float
  order: Float
  total_points: Float
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
}

"""aggregate var_samp on columns"""
type epochs_var_samp_fields {
  id: Float
  order: Float
  total_points: Float
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
}

"""aggregate variance on columns"""
type epochs_variance_fields {
  id: Float
  order: Float
  total_points: Float
  """
  A computed field, executes function "total_points_available"
  """
  total_points_available: Int
}

"""
columns and relationships of "eth_claims"
"""
type eth_claims {
  account: String!
  amount: numeric!
  claimed: Boolean
  created_at: timestamptz
  id: Int!
  proof(
    """JSON select path"""
    path: String
  ): jsonb!
  root: String!
  updated_at: timestamptz
}

"""
Boolean expression to filter rows from the table "eth_claims". All fields are combined with a logical 'AND'.
"""
input eth_claims_bool_exp {
  _and: [eth_claims_bool_exp!]
  _not: eth_claims_bool_exp
  _or: [eth_claims_bool_exp!]
  account: String_comparison_exp
  amount: numeric_comparison_exp
  claimed: Boolean_comparison_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  proof: jsonb_comparison_exp
  root: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""Ordering options when selecting data from "eth_claims"."""
input eth_claims_order_by {
  account: order_by
  amount: order_by
  claimed: order_by
  created_at: order_by
  id: order_by
  proof: order_by
  root: order_by
  updated_at: order_by
}

"""
select columns of table "eth_claims"
"""
enum eth_claims_select_column {
  """column name"""
  account
  """column name"""
  amount
  """column name"""
  claimed
  """column name"""
  created_at
  """column name"""
  id
  """column name"""
  proof
  """column name"""
  root
  """column name"""
  updated_at
}

"""
Streaming cursor of the table "eth_claims"
"""
input eth_claims_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: eth_claims_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input eth_claims_stream_cursor_value_input {
  account: String
  amount: numeric
  claimed: Boolean
  created_at: timestamptz
  id: Int
  proof: jsonb
  root: String
  updated_at: timestamptz
}

scalar jsonb

input jsonb_cast_exp {
  String: String_comparison_exp
}

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  _cast: jsonb_cast_exp
  """is the column contained in the given json value"""
  _contained_in: jsonb
  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb
  """does the string exist as a top-level key in the column"""
  _has_key: String
  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]
  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""
columns and relationships of "onboarding_completions"
"""
type onboarding_completions {
  account_id: String!
  completed_at: timestamptz!
  counter_triple_id: String
  id: Int!
  object_id: String
  onboarding_quest_id: Int!
  subject_id: String
  triple_id: String
}

"""
Boolean expression to filter rows from the table "onboarding_completions". All fields are combined with a logical 'AND'.
"""
input onboarding_completions_bool_exp {
  _and: [onboarding_completions_bool_exp!]
  _not: onboarding_completions_bool_exp
  _or: [onboarding_completions_bool_exp!]
  account_id: String_comparison_exp
  completed_at: timestamptz_comparison_exp
  counter_triple_id: String_comparison_exp
  id: Int_comparison_exp
  object_id: String_comparison_exp
  onboarding_quest_id: Int_comparison_exp
  subject_id: String_comparison_exp
  triple_id: String_comparison_exp
}

"""Ordering options when selecting data from "onboarding_completions"."""
input onboarding_completions_order_by {
  account_id: order_by
  completed_at: order_by
  counter_triple_id: order_by
  id: order_by
  object_id: order_by
  onboarding_quest_id: order_by
  subject_id: order_by
  triple_id: order_by
}

"""
select columns of table "onboarding_completions"
"""
enum onboarding_completions_select_column {
  """column name"""
  account_id
  """column name"""
  completed_at
  """column name"""
  counter_triple_id
  """column name"""
  id
  """column name"""
  object_id
  """column name"""
  onboarding_quest_id
  """column name"""
  subject_id
  """column name"""
  triple_id
}

"""
Streaming cursor of the table "onboarding_completions"
"""
input onboarding_completions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: onboarding_completions_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input onboarding_completions_stream_cursor_value_input {
  account_id: String
  completed_at: timestamptz
  counter_triple_id: String
  id: Int
  object_id: String
  onboarding_quest_id: Int
  subject_id: String
  triple_id: String
}

"""
columns and relationships of "onboarding_quests"
"""
type onboarding_quests {
  description: String
  id: Int!
  link: String
  object_id: String
  predicate_id: String
  preferences_predicate_id: String
  tag_object_id: String
  title: String!
}

"""
Boolean expression to filter rows from the table "onboarding_quests". All fields are combined with a logical 'AND'.
"""
input onboarding_quests_bool_exp {
  _and: [onboarding_quests_bool_exp!]
  _not: onboarding_quests_bool_exp
  _or: [onboarding_quests_bool_exp!]
  description: String_comparison_exp
  id: Int_comparison_exp
  link: String_comparison_exp
  object_id: String_comparison_exp
  predicate_id: String_comparison_exp
  preferences_predicate_id: String_comparison_exp
  tag_object_id: String_comparison_exp
  title: String_comparison_exp
}

"""Ordering options when selecting data from "onboarding_quests"."""
input onboarding_quests_order_by {
  description: order_by
  id: order_by
  link: order_by
  object_id: order_by
  predicate_id: order_by
  preferences_predicate_id: order_by
  tag_object_id: order_by
  title: order_by
}

"""
select columns of table "onboarding_quests"
"""
enum onboarding_quests_select_column {
  """column name"""
  description
  """column name"""
  id
  """column name"""
  link
  """column name"""
  object_id
  """column name"""
  predicate_id
  """column name"""
  preferences_predicate_id
  """column name"""
  tag_object_id
  """column name"""
  title
}

"""
Streaming cursor of the table "onboarding_quests"
"""
input onboarding_quests_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: onboarding_quests_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input onboarding_quests_stream_cursor_value_input {
  description: String
  id: Int
  link: String
  object_id: String
  predicate_id: String
  preferences_predicate_id: String
  tag_object_id: String
  title: String
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc
  """in ascending order, nulls first"""
  asc_nulls_first
  """in ascending order, nulls last"""
  asc_nulls_last
  """in descending order, nulls first"""
  desc
  """in descending order, nulls first"""
  desc_nulls_first
  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "point_events"
"""
type point_events {
  address: String!
  amount: Int!
  date: timestamp!
  id: Int!
  type: String!
}

"""
aggregated selection of "point_events"
"""
type point_events_aggregate {
  aggregate: point_events_aggregate_fields
  nodes: [point_events!]!
}

"""
aggregate fields of "point_events"
"""
type point_events_aggregate_fields {
  avg: point_events_avg_fields
  count(columns: [point_events_select_column!], distinct: Boolean): Int!
  max: point_events_max_fields
  min: point_events_min_fields
  stddev: point_events_stddev_fields
  stddev_pop: point_events_stddev_pop_fields
  stddev_samp: point_events_stddev_samp_fields
  sum: point_events_sum_fields
  var_pop: point_events_var_pop_fields
  var_samp: point_events_var_samp_fields
  variance: point_events_variance_fields
}

"""aggregate avg on columns"""
type point_events_avg_fields {
  amount: Float
  id: Float
}

"""
Boolean expression to filter rows from the table "point_events". All fields are combined with a logical 'AND'.
"""
input point_events_bool_exp {
  _and: [point_events_bool_exp!]
  _not: point_events_bool_exp
  _or: [point_events_bool_exp!]
  address: String_comparison_exp
  amount: Int_comparison_exp
  date: timestamp_comparison_exp
  id: Int_comparison_exp
  type: String_comparison_exp
}

"""aggregate max on columns"""
type point_events_max_fields {
  address: String
  amount: Int
  date: timestamp
  id: Int
  type: String
}

"""aggregate min on columns"""
type point_events_min_fields {
  address: String
  amount: Int
  date: timestamp
  id: Int
  type: String
}

"""Ordering options when selecting data from "point_events"."""
input point_events_order_by {
  address: order_by
  amount: order_by
  date: order_by
  id: order_by
  type: order_by
}

"""
select columns of table "point_events"
"""
enum point_events_select_column {
  """column name"""
  address
  """column name"""
  amount
  """column name"""
  date
  """column name"""
  id
  """column name"""
  type
}

"""aggregate stddev on columns"""
type point_events_stddev_fields {
  amount: Float
  id: Float
}

"""aggregate stddev_pop on columns"""
type point_events_stddev_pop_fields {
  amount: Float
  id: Float
}

"""aggregate stddev_samp on columns"""
type point_events_stddev_samp_fields {
  amount: Float
  id: Float
}

"""
Streaming cursor of the table "point_events"
"""
input point_events_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: point_events_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input point_events_stream_cursor_value_input {
  address: String
  amount: Int
  date: timestamp
  id: Int
  type: String
}

"""aggregate sum on columns"""
type point_events_sum_fields {
  amount: Int
  id: Int
}

"""aggregate var_pop on columns"""
type point_events_var_pop_fields {
  amount: Float
  id: Float
}

"""aggregate var_samp on columns"""
type point_events_var_samp_fields {
  amount: Float
  id: Float
}

"""aggregate variance on columns"""
type point_events_variance_fields {
  amount: Float
  id: Float
}

"""
columns and relationships of "points"
"""
type points {
  account_id: String!
  community: Int!
  minigame1: Int!
  portal_quests: Int!
  referral: Int!
  social: Int!
}

"""
aggregated selection of "points"
"""
type points_aggregate {
  aggregate: points_aggregate_fields
  nodes: [points!]!
}

"""
aggregate fields of "points"
"""
type points_aggregate_fields {
  avg: points_avg_fields
  count(columns: [points_select_column!], distinct: Boolean): Int!
  max: points_max_fields
  min: points_min_fields
  stddev: points_stddev_fields
  stddev_pop: points_stddev_pop_fields
  stddev_samp: points_stddev_samp_fields
  sum: points_sum_fields
  var_pop: points_var_pop_fields
  var_samp: points_var_samp_fields
  variance: points_variance_fields
}

"""aggregate avg on columns"""
type points_avg_fields {
  community: Float
  minigame1: Float
  portal_quests: Float
  referral: Float
  social: Float
}

"""
Boolean expression to filter rows from the table "points". All fields are combined with a logical 'AND'.
"""
input points_bool_exp {
  _and: [points_bool_exp!]
  _not: points_bool_exp
  _or: [points_bool_exp!]
  account_id: String_comparison_exp
  community: Int_comparison_exp
  minigame1: Int_comparison_exp
  portal_quests: Int_comparison_exp
  referral: Int_comparison_exp
  social: Int_comparison_exp
}

"""aggregate max on columns"""
type points_max_fields {
  account_id: String
  community: Int
  minigame1: Int
  portal_quests: Int
  referral: Int
  social: Int
}

"""aggregate min on columns"""
type points_min_fields {
  account_id: String
  community: Int
  minigame1: Int
  portal_quests: Int
  referral: Int
  social: Int
}

"""Ordering options when selecting data from "points"."""
input points_order_by {
  account_id: order_by
  community: order_by
  minigame1: order_by
  portal_quests: order_by
  referral: order_by
  social: order_by
}

"""
select columns of table "points"
"""
enum points_select_column {
  """column name"""
  account_id
  """column name"""
  community
  """column name"""
  minigame1
  """column name"""
  portal_quests
  """column name"""
  referral
  """column name"""
  social
}

"""aggregate stddev on columns"""
type points_stddev_fields {
  community: Float
  minigame1: Float
  portal_quests: Float
  referral: Float
  social: Float
}

"""aggregate stddev_pop on columns"""
type points_stddev_pop_fields {
  community: Float
  minigame1: Float
  portal_quests: Float
  referral: Float
  social: Float
}

"""aggregate stddev_samp on columns"""
type points_stddev_samp_fields {
  community: Float
  minigame1: Float
  portal_quests: Float
  referral: Float
  social: Float
}

"""
Streaming cursor of the table "points"
"""
input points_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: points_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input points_stream_cursor_value_input {
  account_id: String
  community: Int
  minigame1: Int
  portal_quests: Int
  referral: Int
  social: Int
}

"""aggregate sum on columns"""
type points_sum_fields {
  community: Int
  minigame1: Int
  portal_quests: Int
  referral: Int
  social: Int
}

"""aggregate var_pop on columns"""
type points_var_pop_fields {
  community: Float
  minigame1: Float
  portal_quests: Float
  referral: Float
  social: Float
}

"""aggregate var_samp on columns"""
type points_var_samp_fields {
  community: Float
  minigame1: Float
  portal_quests: Float
  referral: Float
  social: Float
}

"""aggregate variance on columns"""
type points_variance_fields {
  community: Float
  minigame1: Float
  portal_quests: Float
  referral: Float
  social: Float
}

type query_root {
  """An array relationship"""
  epoch_completions(
    """distinct select on columns"""
    distinct_on: [epoch_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_completions_order_by!]
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): [epoch_completions!]!
  """An aggregate relationship"""
  epoch_completions_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_completions_order_by!]
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): epoch_completions_aggregate!
  """
  fetch data from the table: "epoch_completions" using primary key columns
  """
  epoch_completions_by_pk(id: Int!): epoch_completions
  """
  fetch data from the table: "epoch_points"
  """
  epoch_points(
    """distinct select on columns"""
    distinct_on: [epoch_points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_points_order_by!]
    """filter the rows returned"""
    where: epoch_points_bool_exp
  ): [epoch_points!]!
  """
  fetch aggregated fields from the table: "epoch_points"
  """
  epoch_points_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_points_order_by!]
    """filter the rows returned"""
    where: epoch_points_bool_exp
  ): epoch_points_aggregate!
  """fetch data from the table: "epoch_points" using primary key columns"""
  epoch_points_by_pk(account_id: String!): epoch_points
  """An array relationship"""
  epoch_questions(
    """distinct select on columns"""
    distinct_on: [epoch_questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_questions_order_by!]
    """filter the rows returned"""
    where: epoch_questions_bool_exp
  ): [epoch_questions!]!
  """An aggregate relationship"""
  epoch_questions_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_questions_order_by!]
    """filter the rows returned"""
    where: epoch_questions_bool_exp
  ): epoch_questions_aggregate!
  """fetch data from the table: "epoch_questions" using primary key columns"""
  epoch_questions_by_pk(id: Int!): epoch_questions
  """
  fetch data from the table: "epochs"
  """
  epochs(
    """distinct select on columns"""
    distinct_on: [epochs_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epochs_order_by!]
    """filter the rows returned"""
    where: epochs_bool_exp
  ): [epochs!]!
  """
  fetch aggregated fields from the table: "epochs"
  """
  epochs_aggregate(
    """distinct select on columns"""
    distinct_on: [epochs_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epochs_order_by!]
    """filter the rows returned"""
    where: epochs_bool_exp
  ): epochs_aggregate!
  """fetch data from the table: "epochs" using primary key columns"""
  epochs_by_pk(id: Int!): epochs
  """
  fetch data from the table: "eth_claims"
  """
  eth_claims(
    """distinct select on columns"""
    distinct_on: [eth_claims_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [eth_claims_order_by!]
    """filter the rows returned"""
    where: eth_claims_bool_exp
  ): [eth_claims!]!
  """fetch data from the table: "eth_claims" using primary key columns"""
  eth_claims_by_pk(id: Int!): eth_claims
  """
  fetch data from the table: "onboarding_completions"
  """
  onboarding_completions(
    """distinct select on columns"""
    distinct_on: [onboarding_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [onboarding_completions_order_by!]
    """filter the rows returned"""
    where: onboarding_completions_bool_exp
  ): [onboarding_completions!]!
  """
  fetch data from the table: "onboarding_completions" using primary key columns
  """
  onboarding_completions_by_pk(id: Int!): onboarding_completions
  """
  fetch data from the table: "onboarding_quests"
  """
  onboarding_quests(
    """distinct select on columns"""
    distinct_on: [onboarding_quests_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [onboarding_quests_order_by!]
    """filter the rows returned"""
    where: onboarding_quests_bool_exp
  ): [onboarding_quests!]!
  """
  fetch data from the table: "onboarding_quests" using primary key columns
  """
  onboarding_quests_by_pk(id: Int!): onboarding_quests
  """
  fetch data from the table: "point_events"
  """
  point_events(
    """distinct select on columns"""
    distinct_on: [point_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [point_events_order_by!]
    """filter the rows returned"""
    where: point_events_bool_exp
  ): [point_events!]!
  """
  fetch aggregated fields from the table: "point_events"
  """
  point_events_aggregate(
    """distinct select on columns"""
    distinct_on: [point_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [point_events_order_by!]
    """filter the rows returned"""
    where: point_events_bool_exp
  ): point_events_aggregate!
  """fetch data from the table: "point_events" using primary key columns"""
  point_events_by_pk(id: Int!): point_events
  """
  fetch data from the table: "points"
  """
  points(
    """distinct select on columns"""
    distinct_on: [points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [points_order_by!]
    """filter the rows returned"""
    where: points_bool_exp
  ): [points!]!
  """
  fetch aggregated fields from the table: "points"
  """
  points_aggregate(
    """distinct select on columns"""
    distinct_on: [points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [points_order_by!]
    """filter the rows returned"""
    where: points_bool_exp
  ): points_aggregate!
  """fetch data from the table: "points" using primary key columns"""
  points_by_pk(account_id: String!): points
  """
  fetch data from the table: "questions"
  """
  questions(
    """distinct select on columns"""
    distinct_on: [questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [questions_order_by!]
    """filter the rows returned"""
    where: questions_bool_exp
  ): [questions!]!
  """
  fetch aggregated fields from the table: "questions"
  """
  questions_aggregate(
    """distinct select on columns"""
    distinct_on: [questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [questions_order_by!]
    """filter the rows returned"""
    where: questions_bool_exp
  ): questions_aggregate!
  """fetch data from the table: "questions" using primary key columns"""
  questions_by_pk(id: Int!): questions
  """
  fetch data from the table: "relic_points"
  """
  relic_points(
    """distinct select on columns"""
    distinct_on: [relic_points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [relic_points_order_by!]
    """filter the rows returned"""
    where: relic_points_bool_exp
  ): [relic_points!]!
  """
  fetch aggregated fields from the table: "relic_points"
  """
  relic_points_aggregate(
    """distinct select on columns"""
    distinct_on: [relic_points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [relic_points_order_by!]
    """filter the rows returned"""
    where: relic_points_bool_exp
  ): relic_points_aggregate!
  """fetch data from the table: "relic_points" using primary key columns"""
  relic_points_by_pk(address: String!): relic_points
}

"""
columns and relationships of "questions"
"""
type questions {
  description: String!
  enabled: Boolean
  id: Int!
  link: String
  object_id: Int!
  point_award_amount: Int!
  predicate_id: Int!
  title: String!
}

"""
aggregated selection of "questions"
"""
type questions_aggregate {
  aggregate: questions_aggregate_fields
  nodes: [questions!]!
}

"""
aggregate fields of "questions"
"""
type questions_aggregate_fields {
  avg: questions_avg_fields
  count(columns: [questions_select_column!], distinct: Boolean): Int!
  max: questions_max_fields
  min: questions_min_fields
  stddev: questions_stddev_fields
  stddev_pop: questions_stddev_pop_fields
  stddev_samp: questions_stddev_samp_fields
  sum: questions_sum_fields
  var_pop: questions_var_pop_fields
  var_samp: questions_var_samp_fields
  variance: questions_variance_fields
}

"""aggregate avg on columns"""
type questions_avg_fields {
  id: Float
  object_id: Float
  point_award_amount: Float
  predicate_id: Float
}

"""
Boolean expression to filter rows from the table "questions". All fields are combined with a logical 'AND'.
"""
input questions_bool_exp {
  _and: [questions_bool_exp!]
  _not: questions_bool_exp
  _or: [questions_bool_exp!]
  description: String_comparison_exp
  enabled: Boolean_comparison_exp
  id: Int_comparison_exp
  link: String_comparison_exp
  object_id: Int_comparison_exp
  point_award_amount: Int_comparison_exp
  predicate_id: Int_comparison_exp
  title: String_comparison_exp
}

"""aggregate max on columns"""
type questions_max_fields {
  description: String
  id: Int
  link: String
  object_id: Int
  point_award_amount: Int
  predicate_id: Int
  title: String
}

"""aggregate min on columns"""
type questions_min_fields {
  description: String
  id: Int
  link: String
  object_id: Int
  point_award_amount: Int
  predicate_id: Int
  title: String
}

"""Ordering options when selecting data from "questions"."""
input questions_order_by {
  description: order_by
  enabled: order_by
  id: order_by
  link: order_by
  object_id: order_by
  point_award_amount: order_by
  predicate_id: order_by
  title: order_by
}

"""
select columns of table "questions"
"""
enum questions_select_column {
  """column name"""
  description
  """column name"""
  enabled
  """column name"""
  id
  """column name"""
  link
  """column name"""
  object_id
  """column name"""
  point_award_amount
  """column name"""
  predicate_id
  """column name"""
  title
}

"""aggregate stddev on columns"""
type questions_stddev_fields {
  id: Float
  object_id: Float
  point_award_amount: Float
  predicate_id: Float
}

"""aggregate stddev_pop on columns"""
type questions_stddev_pop_fields {
  id: Float
  object_id: Float
  point_award_amount: Float
  predicate_id: Float
}

"""aggregate stddev_samp on columns"""
type questions_stddev_samp_fields {
  id: Float
  object_id: Float
  point_award_amount: Float
  predicate_id: Float
}

"""
Streaming cursor of the table "questions"
"""
input questions_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: questions_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input questions_stream_cursor_value_input {
  description: String
  enabled: Boolean
  id: Int
  link: String
  object_id: Int
  point_award_amount: Int
  predicate_id: Int
  title: String
}

"""aggregate sum on columns"""
type questions_sum_fields {
  id: Int
  object_id: Int
  point_award_amount: Int
  predicate_id: Int
}

"""aggregate var_pop on columns"""
type questions_var_pop_fields {
  id: Float
  object_id: Float
  point_award_amount: Float
  predicate_id: Float
}

"""aggregate var_samp on columns"""
type questions_var_samp_fields {
  id: Float
  object_id: Float
  point_award_amount: Float
  predicate_id: Float
}

"""aggregate variance on columns"""
type questions_variance_fields {
  id: Float
  object_id: Float
  point_award_amount: Float
  predicate_id: Float
}

"""
columns and relationships of "relic_points"
"""
type relic_points {
  address: String!
  airdrop_points: bigint
  genesis_minter_points: Int!
  snapshot_1_holder_points: Int!
  snapshot_2_holder_points: Int!
  snapshot_3_holder_points: Int!
  snapshot_4_holder_points: Int!
  snapshot_5_holder_points: Int!
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""
aggregated selection of "relic_points"
"""
type relic_points_aggregate {
  aggregate: relic_points_aggregate_fields
  nodes: [relic_points!]!
}

"""
aggregate fields of "relic_points"
"""
type relic_points_aggregate_fields {
  avg: relic_points_avg_fields
  count(columns: [relic_points_select_column!], distinct: Boolean): Int!
  max: relic_points_max_fields
  min: relic_points_min_fields
  stddev: relic_points_stddev_fields
  stddev_pop: relic_points_stddev_pop_fields
  stddev_samp: relic_points_stddev_samp_fields
  sum: relic_points_sum_fields
  var_pop: relic_points_var_pop_fields
  var_samp: relic_points_var_samp_fields
  variance: relic_points_variance_fields
}

"""aggregate avg on columns"""
type relic_points_avg_fields {
  airdrop_points: Float
  genesis_minter_points: Float
  snapshot_1_holder_points: Float
  snapshot_2_holder_points: Float
  snapshot_3_holder_points: Float
  snapshot_4_holder_points: Float
  snapshot_5_holder_points: Float
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""
Boolean expression to filter rows from the table "relic_points". All fields are combined with a logical 'AND'.
"""
input relic_points_bool_exp {
  _and: [relic_points_bool_exp!]
  _not: relic_points_bool_exp
  _or: [relic_points_bool_exp!]
  address: String_comparison_exp
  airdrop_points: bigint_comparison_exp
  genesis_minter_points: Int_comparison_exp
  snapshot_1_holder_points: Int_comparison_exp
  snapshot_2_holder_points: Int_comparison_exp
  snapshot_3_holder_points: Int_comparison_exp
  snapshot_4_holder_points: Int_comparison_exp
  snapshot_5_holder_points: Int_comparison_exp
  total_relic_points: Int_comparison_exp
}

"""aggregate max on columns"""
type relic_points_max_fields {
  address: String
  airdrop_points: bigint
  genesis_minter_points: Int
  snapshot_1_holder_points: Int
  snapshot_2_holder_points: Int
  snapshot_3_holder_points: Int
  snapshot_4_holder_points: Int
  snapshot_5_holder_points: Int
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""aggregate min on columns"""
type relic_points_min_fields {
  address: String
  airdrop_points: bigint
  genesis_minter_points: Int
  snapshot_1_holder_points: Int
  snapshot_2_holder_points: Int
  snapshot_3_holder_points: Int
  snapshot_4_holder_points: Int
  snapshot_5_holder_points: Int
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""Ordering options when selecting data from "relic_points"."""
input relic_points_order_by {
  address: order_by
  airdrop_points: order_by
  genesis_minter_points: order_by
  snapshot_1_holder_points: order_by
  snapshot_2_holder_points: order_by
  snapshot_3_holder_points: order_by
  snapshot_4_holder_points: order_by
  snapshot_5_holder_points: order_by
  total_relic_points: order_by
}

"""
select columns of table "relic_points"
"""
enum relic_points_select_column {
  """column name"""
  address
  """column name"""
  airdrop_points
  """column name"""
  genesis_minter_points
  """column name"""
  snapshot_1_holder_points
  """column name"""
  snapshot_2_holder_points
  """column name"""
  snapshot_3_holder_points
  """column name"""
  snapshot_4_holder_points
  """column name"""
  snapshot_5_holder_points
}

"""aggregate stddev on columns"""
type relic_points_stddev_fields {
  airdrop_points: Float
  genesis_minter_points: Float
  snapshot_1_holder_points: Float
  snapshot_2_holder_points: Float
  snapshot_3_holder_points: Float
  snapshot_4_holder_points: Float
  snapshot_5_holder_points: Float
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""aggregate stddev_pop on columns"""
type relic_points_stddev_pop_fields {
  airdrop_points: Float
  genesis_minter_points: Float
  snapshot_1_holder_points: Float
  snapshot_2_holder_points: Float
  snapshot_3_holder_points: Float
  snapshot_4_holder_points: Float
  snapshot_5_holder_points: Float
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""aggregate stddev_samp on columns"""
type relic_points_stddev_samp_fields {
  airdrop_points: Float
  genesis_minter_points: Float
  snapshot_1_holder_points: Float
  snapshot_2_holder_points: Float
  snapshot_3_holder_points: Float
  snapshot_4_holder_points: Float
  snapshot_5_holder_points: Float
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""
Streaming cursor of the table "relic_points"
"""
input relic_points_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: relic_points_stream_cursor_value_input!
  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input relic_points_stream_cursor_value_input {
  address: String
  airdrop_points: bigint
  genesis_minter_points: Int
  snapshot_1_holder_points: Int
  snapshot_2_holder_points: Int
  snapshot_3_holder_points: Int
  snapshot_4_holder_points: Int
  snapshot_5_holder_points: Int
}

"""aggregate sum on columns"""
type relic_points_sum_fields {
  airdrop_points: bigint
  genesis_minter_points: Int
  snapshot_1_holder_points: Int
  snapshot_2_holder_points: Int
  snapshot_3_holder_points: Int
  snapshot_4_holder_points: Int
  snapshot_5_holder_points: Int
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""aggregate var_pop on columns"""
type relic_points_var_pop_fields {
  airdrop_points: Float
  genesis_minter_points: Float
  snapshot_1_holder_points: Float
  snapshot_2_holder_points: Float
  snapshot_3_holder_points: Float
  snapshot_4_holder_points: Float
  snapshot_5_holder_points: Float
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""aggregate var_samp on columns"""
type relic_points_var_samp_fields {
  airdrop_points: Float
  genesis_minter_points: Float
  snapshot_1_holder_points: Float
  snapshot_2_holder_points: Float
  snapshot_3_holder_points: Float
  snapshot_4_holder_points: Float
  snapshot_5_holder_points: Float
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

"""aggregate variance on columns"""
type relic_points_variance_fields {
  airdrop_points: Float
  genesis_minter_points: Float
  snapshot_1_holder_points: Float
  snapshot_2_holder_points: Float
  snapshot_3_holder_points: Float
  snapshot_4_holder_points: Float
  snapshot_5_holder_points: Float
  """
  A computed field, executes function "calculate_total_relic_points"
  """
  total_relic_points: Int
}

type subscription_root {
  """An array relationship"""
  epoch_completions(
    """distinct select on columns"""
    distinct_on: [epoch_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_completions_order_by!]
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): [epoch_completions!]!
  """An aggregate relationship"""
  epoch_completions_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_completions_order_by!]
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): epoch_completions_aggregate!
  """
  fetch data from the table: "epoch_completions" using primary key columns
  """
  epoch_completions_by_pk(id: Int!): epoch_completions
  """
  fetch data from the table in a streaming manner: "epoch_completions"
  """
  epoch_completions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [epoch_completions_stream_cursor_input]!
    """filter the rows returned"""
    where: epoch_completions_bool_exp
  ): [epoch_completions!]!
  """
  fetch data from the table: "epoch_points"
  """
  epoch_points(
    """distinct select on columns"""
    distinct_on: [epoch_points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_points_order_by!]
    """filter the rows returned"""
    where: epoch_points_bool_exp
  ): [epoch_points!]!
  """
  fetch aggregated fields from the table: "epoch_points"
  """
  epoch_points_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_points_order_by!]
    """filter the rows returned"""
    where: epoch_points_bool_exp
  ): epoch_points_aggregate!
  """fetch data from the table: "epoch_points" using primary key columns"""
  epoch_points_by_pk(account_id: String!): epoch_points
  """
  fetch data from the table in a streaming manner: "epoch_points"
  """
  epoch_points_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [epoch_points_stream_cursor_input]!
    """filter the rows returned"""
    where: epoch_points_bool_exp
  ): [epoch_points!]!
  """An array relationship"""
  epoch_questions(
    """distinct select on columns"""
    distinct_on: [epoch_questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_questions_order_by!]
    """filter the rows returned"""
    where: epoch_questions_bool_exp
  ): [epoch_questions!]!
  """An aggregate relationship"""
  epoch_questions_aggregate(
    """distinct select on columns"""
    distinct_on: [epoch_questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epoch_questions_order_by!]
    """filter the rows returned"""
    where: epoch_questions_bool_exp
  ): epoch_questions_aggregate!
  """fetch data from the table: "epoch_questions" using primary key columns"""
  epoch_questions_by_pk(id: Int!): epoch_questions
  """
  fetch data from the table in a streaming manner: "epoch_questions"
  """
  epoch_questions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [epoch_questions_stream_cursor_input]!
    """filter the rows returned"""
    where: epoch_questions_bool_exp
  ): [epoch_questions!]!
  """
  fetch data from the table: "epochs"
  """
  epochs(
    """distinct select on columns"""
    distinct_on: [epochs_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epochs_order_by!]
    """filter the rows returned"""
    where: epochs_bool_exp
  ): [epochs!]!
  """
  fetch aggregated fields from the table: "epochs"
  """
  epochs_aggregate(
    """distinct select on columns"""
    distinct_on: [epochs_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [epochs_order_by!]
    """filter the rows returned"""
    where: epochs_bool_exp
  ): epochs_aggregate!
  """fetch data from the table: "epochs" using primary key columns"""
  epochs_by_pk(id: Int!): epochs
  """
  fetch data from the table in a streaming manner: "epochs"
  """
  epochs_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [epochs_stream_cursor_input]!
    """filter the rows returned"""
    where: epochs_bool_exp
  ): [epochs!]!
  """
  fetch data from the table: "eth_claims"
  """
  eth_claims(
    """distinct select on columns"""
    distinct_on: [eth_claims_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [eth_claims_order_by!]
    """filter the rows returned"""
    where: eth_claims_bool_exp
  ): [eth_claims!]!
  """fetch data from the table: "eth_claims" using primary key columns"""
  eth_claims_by_pk(id: Int!): eth_claims
  """
  fetch data from the table in a streaming manner: "eth_claims"
  """
  eth_claims_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [eth_claims_stream_cursor_input]!
    """filter the rows returned"""
    where: eth_claims_bool_exp
  ): [eth_claims!]!
  """
  fetch data from the table: "onboarding_completions"
  """
  onboarding_completions(
    """distinct select on columns"""
    distinct_on: [onboarding_completions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [onboarding_completions_order_by!]
    """filter the rows returned"""
    where: onboarding_completions_bool_exp
  ): [onboarding_completions!]!
  """
  fetch data from the table: "onboarding_completions" using primary key columns
  """
  onboarding_completions_by_pk(id: Int!): onboarding_completions
  """
  fetch data from the table in a streaming manner: "onboarding_completions"
  """
  onboarding_completions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [onboarding_completions_stream_cursor_input]!
    """filter the rows returned"""
    where: onboarding_completions_bool_exp
  ): [onboarding_completions!]!
  """
  fetch data from the table: "onboarding_quests"
  """
  onboarding_quests(
    """distinct select on columns"""
    distinct_on: [onboarding_quests_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [onboarding_quests_order_by!]
    """filter the rows returned"""
    where: onboarding_quests_bool_exp
  ): [onboarding_quests!]!
  """
  fetch data from the table: "onboarding_quests" using primary key columns
  """
  onboarding_quests_by_pk(id: Int!): onboarding_quests
  """
  fetch data from the table in a streaming manner: "onboarding_quests"
  """
  onboarding_quests_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [onboarding_quests_stream_cursor_input]!
    """filter the rows returned"""
    where: onboarding_quests_bool_exp
  ): [onboarding_quests!]!
  """
  fetch data from the table: "point_events"
  """
  point_events(
    """distinct select on columns"""
    distinct_on: [point_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [point_events_order_by!]
    """filter the rows returned"""
    where: point_events_bool_exp
  ): [point_events!]!
  """
  fetch aggregated fields from the table: "point_events"
  """
  point_events_aggregate(
    """distinct select on columns"""
    distinct_on: [point_events_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [point_events_order_by!]
    """filter the rows returned"""
    where: point_events_bool_exp
  ): point_events_aggregate!
  """fetch data from the table: "point_events" using primary key columns"""
  point_events_by_pk(id: Int!): point_events
  """
  fetch data from the table in a streaming manner: "point_events"
  """
  point_events_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [point_events_stream_cursor_input]!
    """filter the rows returned"""
    where: point_events_bool_exp
  ): [point_events!]!
  """
  fetch data from the table: "points"
  """
  points(
    """distinct select on columns"""
    distinct_on: [points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [points_order_by!]
    """filter the rows returned"""
    where: points_bool_exp
  ): [points!]!
  """
  fetch aggregated fields from the table: "points"
  """
  points_aggregate(
    """distinct select on columns"""
    distinct_on: [points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [points_order_by!]
    """filter the rows returned"""
    where: points_bool_exp
  ): points_aggregate!
  """fetch data from the table: "points" using primary key columns"""
  points_by_pk(account_id: String!): points
  """
  fetch data from the table in a streaming manner: "points"
  """
  points_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [points_stream_cursor_input]!
    """filter the rows returned"""
    where: points_bool_exp
  ): [points!]!
  """
  fetch data from the table: "questions"
  """
  questions(
    """distinct select on columns"""
    distinct_on: [questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [questions_order_by!]
    """filter the rows returned"""
    where: questions_bool_exp
  ): [questions!]!
  """
  fetch aggregated fields from the table: "questions"
  """
  questions_aggregate(
    """distinct select on columns"""
    distinct_on: [questions_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [questions_order_by!]
    """filter the rows returned"""
    where: questions_bool_exp
  ): questions_aggregate!
  """fetch data from the table: "questions" using primary key columns"""
  questions_by_pk(id: Int!): questions
  """
  fetch data from the table in a streaming manner: "questions"
  """
  questions_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [questions_stream_cursor_input]!
    """filter the rows returned"""
    where: questions_bool_exp
  ): [questions!]!
  """
  fetch data from the table: "relic_points"
  """
  relic_points(
    """distinct select on columns"""
    distinct_on: [relic_points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [relic_points_order_by!]
    """filter the rows returned"""
    where: relic_points_bool_exp
  ): [relic_points!]!
  """
  fetch aggregated fields from the table: "relic_points"
  """
  relic_points_aggregate(
    """distinct select on columns"""
    distinct_on: [relic_points_select_column!]
    """limit the number of rows returned"""
    limit: Int
    """skip the first n rows. Use only with order_by"""
    offset: Int
    """sort the rows by one or more columns"""
    order_by: [relic_points_order_by!]
    """filter the rows returned"""
    where: relic_points_bool_exp
  ): relic_points_aggregate!
  """fetch data from the table: "relic_points" using primary key columns"""
  relic_points_by_pk(address: String!): relic_points
  """
  fetch data from the table in a streaming manner: "relic_points"
  """
  relic_points_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!
    """cursor to stream the results returned by the query"""
    cursor: [relic_points_stream_cursor_input]!
    """filter the rows returned"""
    where: relic_points_bool_exp
  ): [relic_points!]!
}

scalar timestamp

"""
Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}