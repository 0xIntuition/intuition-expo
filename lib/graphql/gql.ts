/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\nquery GlobalSearch(\n  $likeStr: String\n  $accountsLimit: Int\n  $atomsLimit: Int\n  $triplesLimit: Int\n  $collectionsLimit: Int\n) {\n  accounts(\n    limit: $accountsLimit\n    order_by: [ {\n       atom:  {\n          term:  {\n             total_market_cap: desc\n          }\n       }\n    }]\n    where: {\n      type: { _eq: Default }\n      atom_id: { _is_null: false }\n      _or: [\n        { label: { _ilike: $likeStr } }\n        { atom: { data: { _ilike: $likeStr } } }\n      ]\n    }\n  ) {\n    id\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n  atoms(\n    limit: $atomsLimit\n    order_by: [ {\n       term:  {\n          total_market_cap: desc\n       }\n    }]\n    where: {\n      _or: [\n        { data: { _ilike: $likeStr } }\n        { label: { _ilike: $likeStr } }\n        { value: { text_object: { data: { _ilike: $likeStr } } } }\n        { value: { thing: { url: { _ilike: $likeStr } } } }\n        { value: { thing: { name: { _ilike: $likeStr } } } }\n        { value: { thing: { description: { _ilike: $likeStr } } } }\n        { value: { person: { url: { _ilike: $likeStr } } } }\n        { value: { person: { name: { _ilike: $likeStr } } } }\n        { value: { person: { description: { _ilike: $likeStr } } } }\n        { value: { organization: { url: { _ilike: $likeStr } } } }\n        { value: { organization: { name: { _ilike: $likeStr } } } }\n        { value: { organization: { description: { _ilike: $likeStr } } } }\n      ]\n    }\n  ) {\n    term_id\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n  triples(\n    limit: $triplesLimit\n    order_by: [ {\n       triple_term:  {\n          total_market_cap: desc\n       }\n    }]\n    where: {\n      _or: [\n        { subject: { label: { _ilike: $likeStr } } }\n        { predicate: { label: { _like: $likeStr } } }\n        { object: { label: { _like: $likeStr } } }\n      ]\n    }\n  ) {\n    term_id\n    object {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    predicate {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    subject {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n  collections: predicate_objects(\n    where: {\n      predicate: { type: { _eq: Keywords } }\n      object: { label: { _ilike: $likeStr } }\n    }\n    order_by: [{ triple_count: desc }]\n    limit: $collectionsLimit\n  ) {\n    object {\n      label\n      term_id\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n": typeof types.GlobalSearchDocument,
    "\nquery GetAccount($id: String!) {\n  account(id: $id) {\n    id\n    label\n    atom {\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n": typeof types.GetAccountDocument,
    "\nquery GetAtom($term_id: String!) {\n  atom(term_id: $term_id) {\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n}\n": typeof types.GetAtomDocument,
    "\nquery List($objectId: String!, $term: terms_bool_exp, $subject: atoms_bool_exp, $limit: Int, $offset: Int) {\n  object: atom(term_id: $objectId) {\n    label\n  }\n  triples(\n    where: {\n      object_id: {\n        _eq: $objectId\n      }\n      predicate_id: {\n        _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n      }\n      term: $term\n      subject: $subject\n    }\n    limit: $limit\n    offset: $offset\n    order_by: { term: { total_market_cap: desc } }\n  ) {\n    subject {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n    }\n  }\n}\n": typeof types.ListDocument,
    "\nquery GetTriple($term_id: String!) {\n  triple(term_id: $term_id) {\n    subject {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    predicate {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    object {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n": typeof types.GetTripleDocument,
    "\nquery SavedLists(\n  $where: predicate_objects_bool_exp\n  $limit: Int\n  $offset: Int\n  $orderBy: [predicate_objects_order_by!]\n  $triplesWhere: triples_bool_exp\n) {\n  predicate_objects_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  predicate_objects(\n    where: $where\n    limit: $limit\n    offset: $offset\n    order_by: $orderBy\n  ) {\n    id\n    triple_count\n    object {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n      as_object_triples_aggregate(where: $triplesWhere) {\n        aggregate {\n          count\n        }\n      }\n\n      as_object_triples(\n        where: $triplesWhere\n        limit: 6\n        order_by: { term: { total_market_cap: desc } }\n      ) {\n        subject {\n          term_id\n          cached_image {\n            safe\n            url\n          }\n        }\n      }\n    }\n  }\n}\n": typeof types.SavedListsDocument,
    "\nquery AccountProfile($accountId: String!, $positionsBool: positions_bool_exp) {\n  account(id: $accountId) {\n    atom {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n      organizations: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x41f20a29ee2587b977cf5b1386f44392224b05280b6ea6e3188be7b673b98c4d\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n      projects: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x35614b2d339d64b8ecad5d4b39968be8d3d5eb31d4ccf81185d152487805d7fb\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n      skills: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0xb5b5a44a01d657bf5a3f747c7609a1c665dff44b0b2c3a64556b137e3f0f9d02\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n\n      tags: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n    }\n  }\n}    \n": typeof types.AccountProfileDocument,
    "\nquery AnswerList($objectId: String!, $term: terms_bool_exp, $subject: atoms_bool_exp, $limit: Int, $offset: Int) {\n  object: atom(term_id: $objectId) {\n    label\n  }\n  triples(\n    where: {\n      object_id: {\n        _eq: $objectId\n      }\n      predicate_id: {\n        _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n      }\n      term: $term\n      subject: $subject\n    }\n    limit: $limit\n    offset: $offset\n    order_by: { term: { total_market_cap: desc } }\n  ) {\n    term_id\n    subject {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n    }\n  }\n}\n": typeof types.AnswerListDocument,
    "\nquery GetListPositions($address: String!, $predicateId: String!, $objectId: String!) {\n  positions(\n    where: {\n      account_id: { _eq: $address }\n      term: {\n        triple: {\n          predicate_id: { _eq: $predicateId }\n          object_id: { _eq: $objectId }\n        }\n      }\n    }\n  ) {\n    term {\n      triple {\n        subject_id\n      }\n    }\n  }\n}\n": typeof types.GetListPositionsDocument,
    "\nquery GetQuestionsPositions($address: String!, $predicateId: String!, $object: String_comparison_exp!) {\n  positions(\n    where: {\n      account_id: { _eq: $address }\n      term: {\n        triple: {\n          predicate_id: { _eq: $predicateId }\n          object_id: $object\n        }\n      }\n    }\n  ) {\n    term {\n      triple {\n        object_id\n      }\n    }\n  }\n}\n": typeof types.GetQuestionsPositionsDocument,
};
const documents: Documents = {
    "\nquery GlobalSearch(\n  $likeStr: String\n  $accountsLimit: Int\n  $atomsLimit: Int\n  $triplesLimit: Int\n  $collectionsLimit: Int\n) {\n  accounts(\n    limit: $accountsLimit\n    order_by: [ {\n       atom:  {\n          term:  {\n             total_market_cap: desc\n          }\n       }\n    }]\n    where: {\n      type: { _eq: Default }\n      atom_id: { _is_null: false }\n      _or: [\n        { label: { _ilike: $likeStr } }\n        { atom: { data: { _ilike: $likeStr } } }\n      ]\n    }\n  ) {\n    id\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n  atoms(\n    limit: $atomsLimit\n    order_by: [ {\n       term:  {\n          total_market_cap: desc\n       }\n    }]\n    where: {\n      _or: [\n        { data: { _ilike: $likeStr } }\n        { label: { _ilike: $likeStr } }\n        { value: { text_object: { data: { _ilike: $likeStr } } } }\n        { value: { thing: { url: { _ilike: $likeStr } } } }\n        { value: { thing: { name: { _ilike: $likeStr } } } }\n        { value: { thing: { description: { _ilike: $likeStr } } } }\n        { value: { person: { url: { _ilike: $likeStr } } } }\n        { value: { person: { name: { _ilike: $likeStr } } } }\n        { value: { person: { description: { _ilike: $likeStr } } } }\n        { value: { organization: { url: { _ilike: $likeStr } } } }\n        { value: { organization: { name: { _ilike: $likeStr } } } }\n        { value: { organization: { description: { _ilike: $likeStr } } } }\n      ]\n    }\n  ) {\n    term_id\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n  triples(\n    limit: $triplesLimit\n    order_by: [ {\n       triple_term:  {\n          total_market_cap: desc\n       }\n    }]\n    where: {\n      _or: [\n        { subject: { label: { _ilike: $likeStr } } }\n        { predicate: { label: { _like: $likeStr } } }\n        { object: { label: { _like: $likeStr } } }\n      ]\n    }\n  ) {\n    term_id\n    object {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    predicate {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    subject {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n  collections: predicate_objects(\n    where: {\n      predicate: { type: { _eq: Keywords } }\n      object: { label: { _ilike: $likeStr } }\n    }\n    order_by: [{ triple_count: desc }]\n    limit: $collectionsLimit\n  ) {\n    object {\n      label\n      term_id\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n": types.GlobalSearchDocument,
    "\nquery GetAccount($id: String!) {\n  account(id: $id) {\n    id\n    label\n    atom {\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n": types.GetAccountDocument,
    "\nquery GetAtom($term_id: String!) {\n  atom(term_id: $term_id) {\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n}\n": types.GetAtomDocument,
    "\nquery List($objectId: String!, $term: terms_bool_exp, $subject: atoms_bool_exp, $limit: Int, $offset: Int) {\n  object: atom(term_id: $objectId) {\n    label\n  }\n  triples(\n    where: {\n      object_id: {\n        _eq: $objectId\n      }\n      predicate_id: {\n        _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n      }\n      term: $term\n      subject: $subject\n    }\n    limit: $limit\n    offset: $offset\n    order_by: { term: { total_market_cap: desc } }\n  ) {\n    subject {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n    }\n  }\n}\n": types.ListDocument,
    "\nquery GetTriple($term_id: String!) {\n  triple(term_id: $term_id) {\n    subject {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    predicate {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    object {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n": types.GetTripleDocument,
    "\nquery SavedLists(\n  $where: predicate_objects_bool_exp\n  $limit: Int\n  $offset: Int\n  $orderBy: [predicate_objects_order_by!]\n  $triplesWhere: triples_bool_exp\n) {\n  predicate_objects_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  predicate_objects(\n    where: $where\n    limit: $limit\n    offset: $offset\n    order_by: $orderBy\n  ) {\n    id\n    triple_count\n    object {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n      as_object_triples_aggregate(where: $triplesWhere) {\n        aggregate {\n          count\n        }\n      }\n\n      as_object_triples(\n        where: $triplesWhere\n        limit: 6\n        order_by: { term: { total_market_cap: desc } }\n      ) {\n        subject {\n          term_id\n          cached_image {\n            safe\n            url\n          }\n        }\n      }\n    }\n  }\n}\n": types.SavedListsDocument,
    "\nquery AccountProfile($accountId: String!, $positionsBool: positions_bool_exp) {\n  account(id: $accountId) {\n    atom {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n      organizations: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x41f20a29ee2587b977cf5b1386f44392224b05280b6ea6e3188be7b673b98c4d\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n      projects: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x35614b2d339d64b8ecad5d4b39968be8d3d5eb31d4ccf81185d152487805d7fb\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n      skills: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0xb5b5a44a01d657bf5a3f747c7609a1c665dff44b0b2c3a64556b137e3f0f9d02\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n\n      tags: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n    }\n  }\n}    \n": types.AccountProfileDocument,
    "\nquery AnswerList($objectId: String!, $term: terms_bool_exp, $subject: atoms_bool_exp, $limit: Int, $offset: Int) {\n  object: atom(term_id: $objectId) {\n    label\n  }\n  triples(\n    where: {\n      object_id: {\n        _eq: $objectId\n      }\n      predicate_id: {\n        _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n      }\n      term: $term\n      subject: $subject\n    }\n    limit: $limit\n    offset: $offset\n    order_by: { term: { total_market_cap: desc } }\n  ) {\n    term_id\n    subject {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n    }\n  }\n}\n": types.AnswerListDocument,
    "\nquery GetListPositions($address: String!, $predicateId: String!, $objectId: String!) {\n  positions(\n    where: {\n      account_id: { _eq: $address }\n      term: {\n        triple: {\n          predicate_id: { _eq: $predicateId }\n          object_id: { _eq: $objectId }\n        }\n      }\n    }\n  ) {\n    term {\n      triple {\n        subject_id\n      }\n    }\n  }\n}\n": types.GetListPositionsDocument,
    "\nquery GetQuestionsPositions($address: String!, $predicateId: String!, $object: String_comparison_exp!) {\n  positions(\n    where: {\n      account_id: { _eq: $address }\n      term: {\n        triple: {\n          predicate_id: { _eq: $predicateId }\n          object_id: $object\n        }\n      }\n    }\n  ) {\n    term {\n      triple {\n        object_id\n      }\n    }\n  }\n}\n": types.GetQuestionsPositionsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GlobalSearch(\n  $likeStr: String\n  $accountsLimit: Int\n  $atomsLimit: Int\n  $triplesLimit: Int\n  $collectionsLimit: Int\n) {\n  accounts(\n    limit: $accountsLimit\n    order_by: [ {\n       atom:  {\n          term:  {\n             total_market_cap: desc\n          }\n       }\n    }]\n    where: {\n      type: { _eq: Default }\n      atom_id: { _is_null: false }\n      _or: [\n        { label: { _ilike: $likeStr } }\n        { atom: { data: { _ilike: $likeStr } } }\n      ]\n    }\n  ) {\n    id\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n  atoms(\n    limit: $atomsLimit\n    order_by: [ {\n       term:  {\n          total_market_cap: desc\n       }\n    }]\n    where: {\n      _or: [\n        { data: { _ilike: $likeStr } }\n        { label: { _ilike: $likeStr } }\n        { value: { text_object: { data: { _ilike: $likeStr } } } }\n        { value: { thing: { url: { _ilike: $likeStr } } } }\n        { value: { thing: { name: { _ilike: $likeStr } } } }\n        { value: { thing: { description: { _ilike: $likeStr } } } }\n        { value: { person: { url: { _ilike: $likeStr } } } }\n        { value: { person: { name: { _ilike: $likeStr } } } }\n        { value: { person: { description: { _ilike: $likeStr } } } }\n        { value: { organization: { url: { _ilike: $likeStr } } } }\n        { value: { organization: { name: { _ilike: $likeStr } } } }\n        { value: { organization: { description: { _ilike: $likeStr } } } }\n      ]\n    }\n  ) {\n    term_id\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n  triples(\n    limit: $triplesLimit\n    order_by: [ {\n       triple_term:  {\n          total_market_cap: desc\n       }\n    }]\n    where: {\n      _or: [\n        { subject: { label: { _ilike: $likeStr } } }\n        { predicate: { label: { _like: $likeStr } } }\n        { object: { label: { _like: $likeStr } } }\n      ]\n    }\n  ) {\n    term_id\n    object {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    predicate {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    subject {\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n  collections: predicate_objects(\n    where: {\n      predicate: { type: { _eq: Keywords } }\n      object: { label: { _ilike: $likeStr } }\n    }\n    order_by: [{ triple_count: desc }]\n    limit: $collectionsLimit\n  ) {\n    object {\n      label\n      term_id\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n"): typeof import('./graphql').GlobalSearchDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAccount($id: String!) {\n  account(id: $id) {\n    id\n    label\n    atom {\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n"): typeof import('./graphql').GetAccountDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetAtom($term_id: String!) {\n  atom(term_id: $term_id) {\n    label\n    cached_image {\n      url\n      safe\n    }\n  }\n}\n"): typeof import('./graphql').GetAtomDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery List($objectId: String!, $term: terms_bool_exp, $subject: atoms_bool_exp, $limit: Int, $offset: Int) {\n  object: atom(term_id: $objectId) {\n    label\n  }\n  triples(\n    where: {\n      object_id: {\n        _eq: $objectId\n      }\n      predicate_id: {\n        _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n      }\n      term: $term\n      subject: $subject\n    }\n    limit: $limit\n    offset: $offset\n    order_by: { term: { total_market_cap: desc } }\n  ) {\n    subject {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n    }\n  }\n}\n"): typeof import('./graphql').ListDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetTriple($term_id: String!) {\n  triple(term_id: $term_id) {\n    subject {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    predicate {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n    object {\n      term_id\n      label\n      cached_image {\n        url\n        safe\n      }\n    }\n  }\n}\n"): typeof import('./graphql').GetTripleDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery SavedLists(\n  $where: predicate_objects_bool_exp\n  $limit: Int\n  $offset: Int\n  $orderBy: [predicate_objects_order_by!]\n  $triplesWhere: triples_bool_exp\n) {\n  predicate_objects_aggregate(where: $where) {\n    aggregate {\n      count\n    }\n  }\n  predicate_objects(\n    where: $where\n    limit: $limit\n    offset: $offset\n    order_by: $orderBy\n  ) {\n    id\n    triple_count\n    object {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n      as_object_triples_aggregate(where: $triplesWhere) {\n        aggregate {\n          count\n        }\n      }\n\n      as_object_triples(\n        where: $triplesWhere\n        limit: 6\n        order_by: { term: { total_market_cap: desc } }\n      ) {\n        subject {\n          term_id\n          cached_image {\n            safe\n            url\n          }\n        }\n      }\n    }\n  }\n}\n"): typeof import('./graphql').SavedListsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery AccountProfile($accountId: String!, $positionsBool: positions_bool_exp) {\n  account(id: $accountId) {\n    atom {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n      organizations: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x41f20a29ee2587b977cf5b1386f44392224b05280b6ea6e3188be7b673b98c4d\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n      projects: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x35614b2d339d64b8ecad5d4b39968be8d3d5eb31d4ccf81185d152487805d7fb\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n      skills: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0xb5b5a44a01d657bf5a3f747c7609a1c665dff44b0b2c3a64556b137e3f0f9d02\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n\n      tags: as_subject_triples(\n        where: {\n          predicate_id: {\n            _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n          }\n          positions: $positionsBool\n        }\n      ) {\n        object {\n          term_id\n          label\n          cached_image {\n            url\n            safe\n          }\n        }\n      }\n    }\n  }\n}    \n"): typeof import('./graphql').AccountProfileDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery AnswerList($objectId: String!, $term: terms_bool_exp, $subject: atoms_bool_exp, $limit: Int, $offset: Int) {\n  object: atom(term_id: $objectId) {\n    label\n  }\n  triples(\n    where: {\n      object_id: {\n        _eq: $objectId\n      }\n      predicate_id: {\n        _eq: \"0x49487b1d5bf2734d497d6d9cfcd72cdfbaefb4d4f03ddc310398b24639173c9d\"\n      }\n      term: $term\n      subject: $subject\n    }\n    limit: $limit\n    offset: $offset\n    order_by: { term: { total_market_cap: desc } }\n  ) {\n    term_id\n    subject {\n      term_id\n      label\n      cached_image {\n        safe\n        url\n      }\n    }\n  }\n}\n"): typeof import('./graphql').AnswerListDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetListPositions($address: String!, $predicateId: String!, $objectId: String!) {\n  positions(\n    where: {\n      account_id: { _eq: $address }\n      term: {\n        triple: {\n          predicate_id: { _eq: $predicateId }\n          object_id: { _eq: $objectId }\n        }\n      }\n    }\n  ) {\n    term {\n      triple {\n        subject_id\n      }\n    }\n  }\n}\n"): typeof import('./graphql').GetListPositionsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\nquery GetQuestionsPositions($address: String!, $predicateId: String!, $object: String_comparison_exp!) {\n  positions(\n    where: {\n      account_id: { _eq: $address }\n      term: {\n        triple: {\n          predicate_id: { _eq: $predicateId }\n          object_id: $object\n        }\n      }\n    }\n  ) {\n    term {\n      triple {\n        object_id\n      }\n    }\n  }\n}\n"): typeof import('./graphql').GetQuestionsPositionsDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
